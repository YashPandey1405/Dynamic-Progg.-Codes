/*
 * MCM --> It Stands For Matrix Chain Multiplication...... 
 * In An Multiplication Of Matrix A[a X b] & Matrix B[c X d] , Then : -
    ~> For Mult. , b=c Is Nessecarry Condition.....
    ~> The Order Of 'AXB' Will Be [a X d].....
    ~> The Total Operations Will Be = (a*b*d) --> Treat This As Cost Of Multiplication.......

 * We Will Be Given n-Matrixes And We Have To Perform Multiplication Of These n-Matix In Such
    a Way Such That The Cost Of Multiplication Is Minimum.......
 * arr[]={1,2,3,4,3} Represents 4 Matrix ::: A(1X2) , B(2X3) , C(3X4) & D(4X3)....... 
 * Order Of Matrix-(i) --> arr[i-1] X arr[i] (Think About It)......
    ~> Matrix-i = arr[i-1] * arr[i]......
    ~> Matrix-j = arr[j-1] * arr[j]......
    ~> Matrix-k = arr[k-1] * arr[k]......
    
 * For A Series Of Multiplication From Matrix-(i) To Matrix-(k) , Then , The Final Order Of Product Of These
    Matrixes Will Be Row(i)*Col(k) i.e. (arr[i-1]*arr[k]) -> Order Of MCM From Matrix-(i) To Matrix-(j)......
*/

import java.util.Arrays;

public class DP19_MCM_Tabulation {

    public static int MCM_DP_Tab(int arr[]) { // O(n^2)......
        int n = arr.length;
        int DP_Tab[][] = new int[n][n];
        // arr[i][j] --> Value Of MCM From Matrix-(i) To Matrix-(j)......

        // Initialization Of Diagonal Row[i][i]=0......
        for (int i = 0; i < n; i++) {
            DP_Tab[i][i] = 0;
        }

        for (int len = 2; len <= n - 1; len++) {
            for (int Row = 1; Row <= n - len; Row++) {
                int Col = Row + len - 1;
                DP_Tab[Row][Col] = Integer.MAX_VALUE;
                for (int k = Row; k <= Col - 1; k++) {

                    // Cost Of Mult. From Matrix-(Start) To Matrix-(k).......
                    // Order Of This Will Be Row(Start)*Col(k) --> arr[Start-1]*arr[k].......
                    // This Will From Matrix-1 Of Order [arr[Start-1]*arr[k]]......
                    int Cost1 = DP_Tab[Row][k];

                    // Cost Of Mult. From Matrix-(k+1) To Matrix-(End).......
                    // Order Of This Will Be Row(k+1)*Col(End) --> arr[k]*arr[End].......
                    // This Will From Matrix-2 Of Order [arr[k]*arr[End]]......
                    int Cost2 = DP_Tab[k + 1][Col];

                    // Mult. Of Matrix-1 & Matrix-2 Whose Cost Will Be Row(1)*Col(1)*Col(2)......
                    // Cost Will Be [arr[Start-1] * arr[k] * arr[End]]......
                    int Cost3 = arr[Row - 1] * arr[k] * arr[Col];

                    int FinalCost = Cost1 + Cost2 + Cost3;
                    DP_Tab[Row][Col] = Math.min(DP_Tab[Row][Col], FinalCost);
                }
            }
        }
        return DP_Tab[1][n - 1];
    }

    public static void main(String args[]) {
        int arr[] = { 1, 2, 3, 4, 3 };
        int n = arr.length;
        int ans = MCM_DP_Tab(arr);
        System.out.println("THE MIN. COST OF MCM USING DP WITH Tabulation IS ::: " + ans);
    }

}
