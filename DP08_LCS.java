// LCS --> Lowest Common SubSequence In 2 Strings......

public class DP08_LCS {

    // In This Function, We Will Find LCS Using Recursion......
    public static int LCS_Recursion(String str1, String str2, int m, int n) { // O(2^[m+n])......
        // When Either 'str1' OR 'str2' Is Empty.....
        if (m == 0 || n == 0) { // Base Case Of Recursion.....
            return 0;
        }
        char c1 = str1.charAt(m - 1); // Last Character Of String 'str1'....
        char c2 = str2.charAt(n - 1); // Last Character Of String 'str2'....

        if (c1 == c2) { // When Last Char Of Both String Is Same.....
            return (LCS_Recursion(str1, str2, m - 1, n - 1) + 1);
        } else {
            // Last Char Of 2 String Is Not Same.....
            int ans1 = LCS_Recursion(str1, str2, m - 1, n); // Recursive Call For 'str1-c1' And 'str2'.....
            int ans2 = LCS_Recursion(str1, str2, m, n - 1); // Recursive Call For 'str1' And 'str2-c2'.....
            return Math.max(ans1, ans2);
        }
    }

    // In This Function, We Will Find LCS With DP Using Memoization......
    public static int LCS_DP_Mem(String str1, String str2, int m, int n, int DP_Mem[][]) { // O(m+n)......
        // When Either 'str1' OR 'str2' Is Empty.....
        if (m == 0 || n == 0) { // Base Case Of Recursion.....
            return 0;
        }
        if (DP_Mem[m][n] != (-1)) {
            return DP_Mem[m][n];
        }
        char c1 = str1.charAt(m - 1); // Last Character Of String 'str1'....
        char c2 = str2.charAt(n - 1); // Last Character Of String 'str2'....

        if (c1 == c2) { // When Last Char Of Both String Is Same.....
            DP_Mem[m][n] = (LCS_DP_Mem(str1, str2, m - 1, n - 1, DP_Mem) + 1);
            return DP_Mem[m][n];
        } else {
            // Last Char Of 2 String Is Not Same.....
            int ans1 = LCS_DP_Mem(str1, str2, m - 1, n, DP_Mem); // Recursive Call For 'str1-c1' And 'str2'.....
            int ans2 = LCS_DP_Mem(str1, str2, m, n - 1, DP_Mem); // Recursive Call For 'str1' And 'str2-c2'.....
            DP_Mem[m][n] = Math.max(ans1, ans2);
            return DP_Mem[m][n];
        }
    }

    public static int LCS_DP_Tab(String str1, String str2, int m, int n) { // O(m+n)......
        int DP_Tab[][] = new int[m + 1][n + 1];
        // DP[i][j] -> LCS Value For first-(i) char Of 'str1'
        // And first-(j) char Of 'str2'.......

        // LCS Value Will Be 0 When Length Of 'str1' OR 'str2' Is 0.....
        for (int i = 0; i < m + 1; i++) { // To Initialize Col=0 With LCS Value=0......
            DP_Tab[i][0] = 0;
        }
        for (int i = 0; i < n + 1; i++) { // To Initialize Row=0 With LCS Value=0......
            DP_Tab[0][i] = 0;
        }

        for (int i = 1; i < (m + 1); i++) {
            for (int j = 1; j < (n + 1); j++) {
                char c1 = str1.charAt(i - 1); // Last Character Of String 'str1'....
                char c2 = str2.charAt(j - 1); // Last Character Of String 'str2'....

                if (c1 == c2) { // When Last Char Of Both String Is Same.....
                    DP_Tab[i][j] = DP_Tab[i - 1][j - 1] + 1;
                } else {
                    // Last Char Of 2 String Is Not Same.....
                    int ans1 = DP_Tab[i - 1][j]; // LCS Value For 'str1-c1' And 'str2'.....
                    int ans2 = DP_Tab[i][j - 1]; // LCS Value For 'str1' And 'str2-c2'.....
                    DP_Tab[i][j] = Math.max(ans1, ans2);
                }
            }
        }
        return DP_Tab[m][n];
    }

    public static void main(String args[]) {
        String str1 = "abcdge";
        String str2 = "abedg"; // LCS='abdg'-->Length=4....
        int m = str1.length(), n = str2.length();

        // Calculation Of LCS Using Recursion.....
        int ans1 = LCS_Recursion(str1, str2, str1.length(), str2.length());
        System.out.println("THE LENGTH OF LCS B/w STRING '" + str1 + "' AND '" + str2 + "' IS ::: " + ans1);

        // Calculation Of LCS With DP Using Memoization Method.....
        int DP_Mem[][] = new int[m + 1][n + 1];
        for (int i = 0; i < (m + 1); i++) { // Initialized Each Element Of 2D-Array By (-1).....
            for (int j = 0; j < (n + 1); j++) {
                DP_Mem[i][j] = (-1);
            }
        }
        int ans2 = LCS_DP_Mem(str1, str2, str1.length(), str2.length(), DP_Mem);
        System.out.println("THE LENGTH OF LCS B/w STRING '" + str1 + "' AND '" + str2
                + "' USING DP WITH Memoization IS ::: " + ans2);

        // Calculation Of LCS With DP Using Tabulation Method.....
        int ans3 = LCS_DP_Tab(str1, str2, str1.length(), str2.length());
        System.out.println("THE LENGTH OF LCS B/w STRING '" + str1 + "' AND '" + str2
                + "' USING DP WITH Tabulation IS ::: " + ans3);

    }
}
